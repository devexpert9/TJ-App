{"version":3,"sources":["webpack:///./node_modules/ckeditor4-angular/fesm2015/ckeditor4-angular.js","webpack:///./node_modules/load-script/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiH;AAClE;AACiB;AAC3B;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAY;AACpC;AACA;AACA;AACA;AACA;AACA,sCAAsC,0DAAY;AAClD;AACA;AACA;AACA;AACA;AACA,qCAAqC,0DAAY;AACjD;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAY;AACpyBAAyB;AACzB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iCAAiC,gEAAiB;AAClD,qCAAqC,gEAAU;AAC/C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,cAAc,OAAO,mDAAK,EAAE;AAC5B,eAAe,OAAO,mDAAK,EAAE;AAC7B,YAAY,OAAO,mDAAK,EAAE;AAC1B,YAAY,OAAO,mDAAK,EAAE;AAC1B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,aAAa,OAAO,oDAAM,EAAE;AAC5B,iBAAiB,OAAO,oDAAM,EAAE;AAChC,cAAc,OAAO,oDAAM,EAAE;AAC7B,kBAAkB,OAAO,oDAAM,EAAE;AACjC,iBAAiB,OAAO,oDAAM,EAAE;AAChC,eAAe,OAAO,oDAAM,EAAE;AAC9B,YAAY,OAAO,oDAAM,EAAE;AAC3B,0BAA0B,OAAO,oDAAM,EAAE;AACzC,yBAAyB,OAAO,oDAAM,EAAE;AACxC,aAAa,OAAO,oDAAM,EAAE;AAC5B,aAAa,OAAO,oDAAM,EAAE;AAC5B,kBAAkB,OAAO,oDAAM,EAAE;AACjC,YAAY,OAAO,oDAAM,EAAE;AAC3B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,0DAAW,EAAE,4DAAY;AACnD;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAE6C;AAC7C;;;;;;;;;;;;;AC9YA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"default~blog-blog-module~your-account-your-account-module.js","sourcesContent":["import { EventEmitter, Component, forwardRef, ElementRef, NgZone, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport loadScript from 'load-script';\n\n/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nlet promise;\nfunction getEditorNamespace(editorURL) {\n    if (editorURL.length < 1) {\n        return Promise.reject(new TypeError('CKEditor URL must be a non-empty string.'));\n    }\n    if ('CKEDITOR' in window) {\n        return Promise.resolve(CKEDITOR);\n    }\n    else if (!promise) {\n        promise = new Promise((scriptResolve, scriptReject) => {\n            loadScript(editorURL, err => {\n                if (err) {\n                    scriptReject(err);\n                }\n                else {\n                    scriptResolve(CKEDITOR);\n                }\n                promise = undefined;\n            });\n        });\n    }\n    return promise;\n}\n\n/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass CKEditorComponent {\n    constructor(elementRef, ngZone) {\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        /**\n         * Tag name of the editor component.\n         *\n         * The default tag is `textarea`.\n         */\n        this.tagName = 'textarea';\n        /**\n         * The type of the editor interface.\n         *\n         * By default editor interface will be initialized as `classic` editor.\n         * You can also choose to create an editor with `inline` interface type instead.\n         *\n         * See https://ckeditor.com/docs/ckeditor4/latest/guide/dev_uitypes.html\n         * and https://ckeditor.com/docs/ckeditor4/latest/examples/fixedui.html\n         * to learn more.\n         */\n        this.type = \"classic\" /* CLASSIC */;\n        /**\n         * Fires when the editor is ready. It corresponds with the `editor#instanceReady`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-instanceReady\n         * event.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Fires when the editor data is loaded, e.g. after calling setData()\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-setData\n         * editor's method. It corresponds with the `editor#dataReady`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dataReady event.\n         */\n        this.dataReady = new EventEmitter();\n        /**\n         * Fires when the content of the editor has changed. It corresponds with the `editor#change`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-change\n         * event. For performance reasons this event may be called even when data didn't really changed.\n         * Please note that this event will only be fired when `undo` plugin is loaded. If you need to\n         * listen for editor changes (e.g. for two-way data binding), use `dataChange` event instead.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Fires when the content of the editor has changed. In contrast to `change` - only emits when\n         * data really changed thus can be successfully used with `[data]` and two way `[(data)]` binding.\n         *\n         * See more: https://angular.io/guide/template-syntax#two-way-binding---\n         */\n        this.dataChange = new EventEmitter();\n        /**\n         * Fires when the native dragStart event occurs. It corresponds with the `editor#dragstart`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragstart\n         * event.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * Fires when the native dragEnd event occurs. It corresponds with the `editor#dragend`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragend\n         * event.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * Fires when the native drop event occurs. It corresponds with the `editor#drop`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-drop\n         * event.\n         */\n        this.drop = new EventEmitter();\n        /**\n         * Fires when the file loader response is received. It corresponds with the `editor#fileUploadResponse`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadResponse\n         * event.\n         */\n        this.fileUploadResponse = new EventEmitter();\n        /**\n         * Fires when the file loader should send XHR. It corresponds with the `editor#fileUploadRequest`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadRequest\n         * event.\n         */\n        this.fileUploadRequest = new EventEmitter();\n        /**\n         * Fires when the editing area of the editor is focused. It corresponds with the `editor#focus`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-focus\n         * event.\n         */\n        this.focus = new EventEmitter();\n        /**\n         * Fires after the user initiated a paste action, but before the data is inserted.\n         * It corresponds with the `editor#paste`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-paste\n         * event.\n         */\n        this.paste = new EventEmitter();\n        /**\n         * Fires after the `paste` event if content was modified. It corresponds with the `editor#afterPaste`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-afterPaste\n         * event.\n         */\n        this.afterPaste = new EventEmitter();\n        /**\n         * Fires when the editing view of the editor is blurred. It corresponds with the `editor#blur`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-blur\n         * event.\n         */\n        this.blur = new EventEmitter();\n        /**\n         * If the component is readâ€“only before the editor instance is created, it remembers that state,\n         * so the editor can become readâ€“only once it is ready.\n         */\n        this._readOnly = null;\n        this._data = null;\n        this._destroyed = false;\n        /**\n         * CKEditor 4 script url address. Script will be loaded only if CKEDITOR namespace is missing.\n         *\n         * Defaults to 'https://cdn.ckeditor.com/4.16.0/standard-all/ckeditor.js'\n         */\n        this.editorUrl = 'https://cdn.ckeditor.com/4.16.0/standard-all/ckeditor.js';\n    }\n    /**\n     * Keeps track of the editor's data.\n     *\n     * It's also decorated as an input which is useful when not using the ngModel.\n     *\n     * See https://angular.io/api/forms/NgModel to learn more.\n     */\n    set data(data) {\n        if (data === this._data) {\n            return;\n        }\n        if (this.instance) {\n            this.instance.setData(data);\n            // Data may be changed by ACF.\n            this._data = this.instance.getData();\n            return;\n        }\n        this._data = data;\n    }\n    get data() {\n        return this._data;\n    }\n    /**\n     * When set to `true`, the editor becomes read-only.\n     *\n     * See https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#property-readOnly\n     * to learn more.\n     */\n    set readOnly(isReadOnly) {\n        if (this.instance) {\n            this.instance.setReadOnly(isReadOnly);\n            return;\n        }\n        // Delay setting read-only state until editor initialization.\n        this._readOnly = isReadOnly;\n    }\n    get readOnly() {\n        if (this.instance) {\n            return this.instance.readOnly;\n        }\n        return this._readOnly;\n    }\n    ngAfterViewInit() {\n        getEditorNamespace(this.editorUrl).then(() => {\n            // Check if component instance was destroyed before `ngAfterViewInit` call (#110).\n            // Here, `this.instance` is still not initialized and so additional flag is needed.\n            if (this._destroyed) {\n                return;\n            }\n            this.ngZone.runOutsideAngular(this.createEditor.bind(this));\n        }).catch(window.console.error);\n    }\n    ngOnDestroy() {\n        this._destroyed = true;\n        this.ngZone.runOutsideAngular(() => {\n            if (this.instance) {\n                this.instance.destroy();\n                this.instance = null;\n            }\n        });\n    }\n    writeValue(value) {\n        this.data = value;\n    }\n    registerOnChange(callback) {\n        this.onChange = callback;\n    }\n    registerOnTouched(callback) {\n        this.onTouched = callback;\n    }\n    createEditor() {\n        const element = document.createElement(this.tagName);\n        this.elementRef.nativeElement.appendChild(element);\n        const instance = this.type === \"inline\" /* INLINE */\n            ? CKEDITOR.inline(element, this.config)\n            : CKEDITOR.replace(element, this.config);\n        instance.once('instanceReady', evt => {\n            this.instance = instance;\n            // Read only state may change during instance initialization.\n            this.readOnly = this._readOnly !== null ? this._readOnly : this.instance.readOnly;\n            this.subscribe(this.instance);\n            const undo = instance.undoManager;\n            if (this.data !== null) {\n                undo && undo.lock();\n                instance.setData(this.data, { callback: () => {\n                        // Locking undoManager prevents 'change' event.\n                        // Trigger it manually to updated bound data.\n                        if (this.data !== instance.getData()) {\n                            undo ? instance.fire('change') : instance.fire('dataReady');\n                        }\n                        undo && undo.unlock();\n                        this.ngZone.run(() => {\n                            this.ready.emit(evt);\n                        });\n                    } });\n            }\n            else {\n                this.ngZone.run(() => {\n                    this.ready.emit(evt);\n                });\n            }\n        });\n    }\n    subscribe(editor) {\n        editor.on('focus', evt => {\n            this.ngZone.run(() => {\n                this.focus.emit(evt);\n            });\n        });\n        editor.on('paste', evt => {\n            this.ngZone.run(() => {\n                this.paste.emit(evt);\n            });\n        });\n        editor.on('afterPaste', evt => {\n            this.ngZone.run(() => {\n                this.afterPaste.emit(evt);\n            });\n        });\n        editor.on('dragend', evt => {\n            this.ngZone.run(() => {\n                this.dragEnd.emit(evt);\n            });\n        });\n        editor.on('dragstart', evt => {\n            this.ngZone.run(() => {\n                this.dragStart.emit(evt);\n            });\n        });\n        editor.on('drop', evt => {\n            this.ngZone.run(() => {\n                this.drop.emit(evt);\n            });\n        });\n        editor.on('fileUploadRequest', evt => {\n            this.ngZone.run(() => {\n                this.fileUploadRequest.emit(evt);\n            });\n        });\n        editor.on('fileUploadResponse', evt => {\n            this.ngZone.run(() => {\n                this.fileUploadResponse.emit(evt);\n            });\n        });\n        editor.on('blur', evt => {\n            this.ngZone.run(() => {\n                if (this.onTouched) {\n                    this.onTouched();\n                }\n                this.blur.emit(evt);\n            });\n        });\n        editor.on('dataReady', this.propagateChange, this);\n        if (this.instance.undoManager) {\n            editor.on('change', this.propagateChange, this);\n        }\n        // If 'undo' plugin is not loaded, listen to 'selectionCheck' event instead. (#54).\n        else {\n            editor.on('selectionCheck', this.propagateChange, this);\n        }\n    }\n    propagateChange(event) {\n        this.ngZone.run(() => {\n            const newData = this.instance.getData();\n            if (event.name === 'change') {\n                this.change.emit(event);\n            }\n            else if (event.name === 'dataReady') {\n                this.dataReady.emit(event);\n            }\n            if (newData === this.data) {\n                return;\n            }\n            this._data = newData;\n            this.dataChange.emit(newData);\n            if (this.onChange) {\n                this.onChange(newData);\n            }\n        });\n    }\n}\nCKEditorComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ckeditor',\n                template: '<ng-template></ng-template>',\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => CKEditorComponent),\n                        multi: true,\n                    }\n                ]\n            },] }\n];\nCKEditorComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\nCKEditorComponent.propDecorators = {\n    config: [{ type: Input }],\n    tagName: [{ type: Input }],\n    type: [{ type: Input }],\n    data: [{ type: Input }],\n    readOnly: [{ type: Input }],\n    ready: [{ type: Output }],\n    dataReady: [{ type: Output }],\n    change: [{ type: Output }],\n    dataChange: [{ type: Output }],\n    dragStart: [{ type: Output }],\n    dragEnd: [{ type: Output }],\n    drop: [{ type: Output }],\n    fileUploadResponse: [{ type: Output }],\n    fileUploadRequest: [{ type: Output }],\n    focus: [{ type: Output }],\n    paste: [{ type: Output }],\n    afterPaste: [{ type: Output }],\n    blur: [{ type: Output }],\n    editorUrl: [{ type: Input }]\n};\n\n/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass CKEditorModule {\n}\nCKEditorModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [FormsModule, CommonModule],\n                declarations: [CKEditorComponent],\n                exports: [CKEditorComponent]\n            },] }\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CKEditorComponent, CKEditorModule };\n//# sourceMappingURL=ckeditor4-angular.js.map\n","\nmodule.exports = function load (src, opts, cb) {\n  var head = document.head || document.getElementsByTagName('head')[0]\n  var script = document.createElement('script')\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  opts = opts || {}\n  cb = cb || function() {}\n\n  script.type = opts.type || 'text/javascript'\n  script.charset = opts.charset || 'utf8';\n  script.async = 'async' in opts ? !!opts.async : true\n  script.src = src\n\n  if (opts.attrs) {\n    setAttributes(script, opts.attrs)\n  }\n\n  if (opts.text) {\n    script.text = '' + opts.text\n  }\n\n  var onend = 'onload' in script ? stdOnEnd : ieOnEnd\n  onend(script, cb)\n\n  // some good legacy browsers (firefox) fail the 'in' detection above\n  // so as a fallback we always set onload\n  // old IE will ignore this and new IE will set onload\n  if (!script.onload) {\n    stdOnEnd(script, cb);\n  }\n\n  head.appendChild(script)\n}\n\nfunction setAttributes(script, attrs) {\n  for (var attr in attrs) {\n    script.setAttribute(attr, attrs[attr]);\n  }\n}\n\nfunction stdOnEnd (script, cb) {\n  script.onload = function () {\n    this.onerror = this.onload = null\n    cb(null, script)\n  }\n  script.onerror = function () {\n    // this.onload = null here is necessary\n    // because even IE9 works not like others\n    this.onerror = this.onload = null\n    cb(new Error('Failed to load ' + this.src), script)\n  }\n}\n\nfunction ieOnEnd (script, cb) {\n  script.onreadystatechange = function () {\n    if (this.readyState != 'complete' && this.readyState != 'loaded') return\n    this.onreadystatechange = null\n    cb(null, script) // there is no way to catch loading errors in IE8\n  }\n}\n"],"sourceRoot":""}