{"version":3,"sources":["ng://ngx-stars/lib/ngx-stars.component.ts","ng://ngx-stars/lib/ngx-stars.module.ts"],"names":["NgxStarsComponent","this","maxStars","initialStars","animationSpeed","wholeStars","ratingOutput","EventEmitter","prototype","ngOnInit","editableStars","Array","from","map","elem","index","EditableStar","setRating","animation","animationInterval","setInterval","starAnimation","bind","starColorAndPadding","Object","assign","starColor","starPadding","color","padding","Number","isInteger","size","margin-right","customPadding","starSize","animationRunning","rating","cancelStarAnimation","clearInterval","Math","round","onStarsUnhover","onStarHover","event","clickedStar","clickedInFirstHalf","classname","forEach","star","position","onStarClick","emit","onZeroStarClick","onZeroStarHover","_this","starNumber","starIcon","pageX","getBoundingClientRect","left","offsetWidth","noop","Component","args","selector","template","styles","Input","Output","NgxStarsModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'ngx-stars',\n  template: `<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\">\n\n<div class=\"stars-line\" (mouseleave)=\"readonly ? noop() : onStarsUnhover()\">\n  <i [ngClass]=\"['fa fa-star ' + starSize()]\" class=\"zero-star\" aria-hidden=\"true\" (click)=\"onZeroStarClick()\" (mousemove)=\"readonly ? noop() : onZeroStarHover()\"></i>\n  <div *ngFor=\"let star of editableStars;\" (click)=\"readonly ? noop() : onStarClick($event, star)\" (mousemove)=\"readonly ? noop() : onStarHover($event, star)\">\n    <i [ngClass]=\"['fa ' + starSize(), star.classname]\" [ngStyle]=\"starColorAndPadding()\" aria-hidden=\"true\"></i>\n  </div>\n</div>\n`,\n  styles: [`i:not(.zero-star){color:#b42025}.stars-line{display:flex;align-items:center;position:relative}.stars-line>div{z-index:999}.zero-star{color:transparent;position:absolute;left:-16px}`],\n})\nexport class NgxStarsComponent implements OnInit {\n\n  @Input()\n  maxStars: number = 5;\n\n  @Input()\n  initialStars: number = 0;\n\n  @Input()\n  readonly: boolean;\n\n  @Input()\n  size: number;\n\n  @Input()\n  color: string;\n\n  @Input()\n  animation: boolean;\n\n  @Input()\n  animationSpeed: number = 100;\n\n  @Input()\n  customPadding: string;\n\n  @Input()\n  wholeStars: boolean = false;\n\n  @Output()\n  ratingOutput: EventEmitter<number> = new EventEmitter();\n\n  rating: number;\n  editableStars: EditableStar[];\n  animationInterval: any;\n  animationRunning: boolean;\n\n  ngOnInit(): void {\n    this.editableStars = Array.from(new Array(this.maxStars)).map((elem, index) => new EditableStar(index));\n    this.setRating(this.initialStars);\n\n    if (this.animation) {\n      this.animationInterval = setInterval(this.starAnimation.bind(this), this.animationSpeed);\n    }\n  }\n\n  starColorAndPadding(): Object {\n    return Object.assign({}, this.starColor(), this.starPadding());\n  }\n\n  private starColor(): Object {\n    return { color: this.color || 'crimson' };\n  }\n\n  private starPadding(): Object {\n    let padding = '0.5rem';\n    if (Number.isInteger(this.size) || this.size > 0 || this.size < 6) {\n      padding = `0.${this.size}rem`;\n    }\n\n    return { 'margin-right': this.customPadding || padding };\n  }\n\n  starSize(): string {\n    if (!Number.isInteger(this.size) || this.size < 2 || this.size > 5) {\n      return '';\n    }\n    return `fa-${this.size}x`;\n  }\n\n  starAnimation(): void {\n    this.animationRunning = true;\n    if (this.rating < this.maxStars) {\n      this.setRating(this.rating += 0.5);\n    }\n    else {\n      this.setRating(0);\n    }\n  }\n\n  cancelStarAnimation(): void {\n    if (this.animationRunning) {\n      clearInterval(this.animationInterval);\n      this.rating = 0;\n      this.animationRunning = false;\n    }\n  }\n\n  setRating(rating: number) {\n    this.rating = Math.round(rating * 2) / 2;\n    this.onStarsUnhover();\n  }\n\n  onStarHover(event: MouseEvent, clickedStar: EditableStar): void {\n    this.cancelStarAnimation();\n\n    const clickedInFirstHalf = this.clickedInFirstHalf(event);\n\n    // fill in either a half or whole star depending on where user clicked\n    clickedStar.classname = (!this.wholeStars && clickedInFirstHalf) ? 'fa-star-half-o' : 'fa-star';\n\n    // fill in all stars in previous positions and clear all in later ones\n    this.editableStars.forEach(star => {\n      if (star.position > clickedStar.position) {\n        star.classname = 'fa-star-o';\n      }\n      else if (star.position < clickedStar.position) {\n        star.classname = 'fa-star';\n      }\n    });\n  }\n\n  onStarClick(event: MouseEvent, clickedStar: EditableStar): void {\n    this.cancelStarAnimation();\n\n    // lock in current rating\n    const clickedInFirstHalf = this.clickedInFirstHalf(event);\n    this.rating = clickedStar.position + ((!this.wholeStars && clickedInFirstHalf) ? 0.5 : 1);\n    this.ratingOutput.emit(this.rating);\n  }\n\n  // hidden star to left of first star lets user click there to set to 0\n  onZeroStarClick(): void {\n    this.setRating(0);\n    this.ratingOutput.emit(this.rating);\n  }\n\n  onZeroStarHover(): void {\n    // clear all stars\n    this.editableStars.forEach(star => star.classname = 'fa-star-o');\n  }\n\n  onStarsUnhover() {\n    // when user stops hovering we want to make stars reflect the last rating applied by clicking\n    this.editableStars.forEach(star => {\n      const starNumber = star.position + 1;\n      if (this.rating >= starNumber) {\n        star.classname = 'fa-star';\n      }\n      else if (this.rating > starNumber - 1 && this.rating < starNumber) {\n        star.classname = 'fa-star-half-o';\n      }\n      else {\n        star.classname = 'fa-star-o';\n      }\n    });\n  }\n\n  private clickedInFirstHalf(event: MouseEvent): boolean {\n    const starIcon = event.target as HTMLElement;\n    return event.pageX < starIcon.getBoundingClientRect().left + starIcon.offsetWidth / 2;\n  }\n\n  noop(): void {}\n}\n\nexport class EditableStar {\n  position: number;\n  classname: string;\n\n  constructor(position: number) {\n    this.position = position;\n    this.classname = 'fa-star-o';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxStarsComponent } from './ngx-stars.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxStarsComponent\n  ],\n  exports: [\n    NgxStarsComponent\n  ]\n})\nexport class NgxStarsModule { }\n"]}