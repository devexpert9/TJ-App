/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
var NgxStarsComponent = /** @class */ (function () {
    function NgxStarsComponent() {
        this.maxStars = 5;
        this.initialStars = 0;
        this.animationSpeed = 100;
        this.wholeStars = false;
        this.ratingOutput = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NgxStarsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.editableStars = Array.from(new Array(this.maxStars)).map(function (elem, index) { return new EditableStar(index); });
        this.setRating(this.initialStars);
        if (this.animation) {
            this.animationInterval = setInterval(this.starAnimation.bind(this), this.animationSpeed);
        }
    };
    /**
     * @return {?}
     */
    NgxStarsComponent.prototype.starColorAndPadding = /**
     * @return {?}
     */
    function () {
        return Object.assign({}, this.starColor(), this.starPadding());
    };
    /**
     * @return {?}
     */
    NgxStarsComponent.prototype.starColor = /**
     * @return {?}
     */
    function () {
        return { color: this.color || 'crimson' };
    };
    /**
     * @return {?}
     */
    NgxStarsComponent.prototype.starPadding = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var padding = '0.5rem';
        if (Number.isInteger(this.size) || this.size > 0 || this.size < 6) {
            padding = "0." + this.size + "rem";
        }
        return { 'margin-right': this.customPadding || padding };
    };
    /**
     * @return {?}
     */
    NgxStarsComponent.prototype.starSize = /**
     * @return {?}
     */
    function () {
        if (!Number.isInteger(this.size) || this.size < 2 || this.size > 5) {
            return '';
        }
        return "fa-" + this.size + "x";
    };
    /**
     * @return {?}
     */
    NgxStarsComponent.prototype.starAnimation = /**
     * @return {?}
     */
    function () {
        this.animationRunning = true;
        if (this.rating < this.maxStars) {
            this.setRating(this.rating += 0.5);
        }
        else {
            this.setRating(0);
        }
    };
    /**
     * @return {?}
     */
    NgxStarsComponent.prototype.cancelStarAnimation = /**
     * @return {?}
     */
    function () {
        if (this.animationRunning) {
            clearInterval(this.animationInterval);
            this.rating = 0;
            this.animationRunning = false;
        }
    };
    /**
     * @param {?} rating
     * @return {?}
     */
    NgxStarsComponent.prototype.setRating = /**
     * @param {?} rating
     * @return {?}
     */
    function (rating) {
        this.rating = Math.round(rating * 2) / 2;
        this.onStarsUnhover();
    };
    /**
     * @param {?} event
     * @param {?} clickedStar
     * @return {?}
     */
    NgxStarsComponent.prototype.onStarHover = /**
     * @param {?} event
     * @param {?} clickedStar
     * @return {?}
     */
    function (event, clickedStar) {
        this.cancelStarAnimation();
        /** @type {?} */
        var clickedInFirstHalf = this.clickedInFirstHalf(event);
        // fill in either a half or whole star depending on where user clicked
        clickedStar.classname = (!this.wholeStars && clickedInFirstHalf) ? 'fa-star-half-o' : 'fa-star';
        // fill in all stars in previous positions and clear all in later ones
        this.editableStars.forEach(function (star) {
            if (star.position > clickedStar.position) {
                star.classname = 'fa-star-o';
            }
            else if (star.position < clickedStar.position) {
                star.classname = 'fa-star';
            }
        });
    };
    /**
     * @param {?} event
     * @param {?} clickedStar
     * @return {?}
     */
    NgxStarsComponent.prototype.onStarClick = /**
     * @param {?} event
     * @param {?} clickedStar
     * @return {?}
     */
    function (event, clickedStar) {
        this.cancelStarAnimation();
        /** @type {?} */
        var clickedInFirstHalf = this.clickedInFirstHalf(event);
        this.rating = clickedStar.position + ((!this.wholeStars && clickedInFirstHalf) ? 0.5 : 1);
        this.ratingOutput.emit(this.rating);
    };
    // hidden star to left of first star lets user click there to set to 0
    /**
     * @return {?}
     */
    NgxStarsComponent.prototype.onZeroStarClick = /**
     * @return {?}
     */
    function () {
        this.setRating(0);
        this.ratingOutput.emit(this.rating);
    };
    /**
     * @return {?}
     */
    NgxStarsComponent.prototype.onZeroStarHover = /**
     * @return {?}
     */
    function () {
        // clear all stars
        this.editableStars.forEach(function (star) { return star.classname = 'fa-star-o'; });
    };
    /**
     * @return {?}
     */
    NgxStarsComponent.prototype.onStarsUnhover = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // when user stops hovering we want to make stars reflect the last rating applied by clicking
        this.editableStars.forEach(function (star) {
            /** @type {?} */
            var starNumber = star.position + 1;
            if (_this.rating >= starNumber) {
                star.classname = 'fa-star';
            }
            else if (_this.rating > starNumber - 1 && _this.rating < starNumber) {
                star.classname = 'fa-star-half-o';
            }
            else {
                star.classname = 'fa-star-o';
            }
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxStarsComponent.prototype.clickedInFirstHalf = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var starIcon = /** @type {?} */ (event.target);
        return event.pageX < starIcon.getBoundingClientRect().left + starIcon.offsetWidth / 2;
    };
    /**
     * @return {?}
     */
    NgxStarsComponent.prototype.noop = /**
     * @return {?}
     */
    function () { };
    NgxStarsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-stars',
                    template: "<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\">\n\n<div class=\"stars-line\" (mouseleave)=\"readonly ? noop() : onStarsUnhover()\">\n  <i [ngClass]=\"['fa fa-star ' + starSize()]\" class=\"zero-star\" aria-hidden=\"true\" (click)=\"onZeroStarClick()\" (mousemove)=\"readonly ? noop() : onZeroStarHover()\"></i>\n  <div *ngFor=\"let star of editableStars;\" (click)=\"readonly ? noop() : onStarClick($event, star)\" (mousemove)=\"readonly ? noop() : onStarHover($event, star)\">\n    <i [ngClass]=\"['fa ' + starSize(), star.classname]\" [ngStyle]=\"starColorAndPadding()\" aria-hidden=\"true\"></i>\n  </div>\n</div>\n",
                    styles: ["i:not(.zero-star){color:#b42025}.stars-line{display:flex;align-items:center;position:relative}.stars-line>div{z-index:999}.zero-star{color:transparent;position:absolute;left:-16px}"],
                },] },
    ];
    NgxStarsComponent.propDecorators = {
        maxStars: [{ type: Input }],
        initialStars: [{ type: Input }],
        readonly: [{ type: Input }],
        size: [{ type: Input }],
        color: [{ type: Input }],
        animation: [{ type: Input }],
        animationSpeed: [{ type: Input }],
        customPadding: [{ type: Input }],
        wholeStars: [{ type: Input }],
        ratingOutput: [{ type: Output }]
    };
    return NgxStarsComponent;
}());
export { NgxStarsComponent };
if (false) {
    /** @type {?} */
    NgxStarsComponent.prototype.maxStars;
    /** @type {?} */
    NgxStarsComponent.prototype.initialStars;
    /** @type {?} */
    NgxStarsComponent.prototype.readonly;
    /** @type {?} */
    NgxStarsComponent.prototype.size;
    /** @type {?} */
    NgxStarsComponent.prototype.color;
    /** @type {?} */
    NgxStarsComponent.prototype.animation;
    /** @type {?} */
    NgxStarsComponent.prototype.animationSpeed;
    /** @type {?} */
    NgxStarsComponent.prototype.customPadding;
    /** @type {?} */
    NgxStarsComponent.prototype.wholeStars;
    /** @type {?} */
    NgxStarsComponent.prototype.ratingOutput;
    /** @type {?} */
    NgxStarsComponent.prototype.rating;
    /** @type {?} */
    NgxStarsComponent.prototype.editableStars;
    /** @type {?} */
    NgxStarsComponent.prototype.animationInterval;
    /** @type {?} */
    NgxStarsComponent.prototype.animationRunning;
}
var EditableStar = /** @class */ (function () {
    function EditableStar(position) {
        this.position = position;
        this.classname = 'fa-star-o';
    }
    return EditableStar;
}());
export { EditableStar };
if (false) {
    /** @type {?} */
    EditableStar.prototype.position;
    /** @type {?} */
    EditableStar.prototype.classname;
}

//# sourceMappingURL=data:application/json;base64,