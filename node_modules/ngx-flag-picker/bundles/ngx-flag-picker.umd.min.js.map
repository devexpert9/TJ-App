{"version":3,"sources":["../../../projects/ngx-flag-picker/src/lib/ngx-flag-picker/ngx-flag-picker.component.ts","../../../projects/ngx-flag-picker/src/lib/ngx-flag-picker.module.ts"],"names":["NgxFlagPickerComponent","renderer","changeDetectorRef","this","_isShowListCountryFlags","showFlags","showLabels","showArrow","changedCountryCode","EventEmitter","outsideClickSelectFlags","Object","defineProperty","prototype","value","markForCheck","getCountryLabel","countryCode","customLabels","toUpperCase","toggleListCountryFlags","isShowListCountryFlags","closeListCountryFlags","openListCountryFlags","subscribeOutsideClickSelectFlags","unsubscribeOutsideClickSelectFlags","changeSelectedCountryCode","selectedCountryCode","emit","_this","listen","event","selectFlagsElementRef","nativeElement","contains","target","undefined","Component","args","selector","template","Renderer2","ChangeDetectorRef","Input","Output","ViewChild","NgModule","declarations","imports","CommonModule","exports"],"mappings":"6YAgCE,SAAAA,EACUC,EACAC,GADAC,KAAAF,SAAAA,EACAE,KAAAD,kBAAAA,EA1BFC,KAAAC,yBAA0B,EAczBD,KAAAE,WAAY,EACZF,KAAAG,YAAa,EACbH,KAAAI,WAAY,EAEXJ,KAAAK,mBAAqB,IAAIC,EAAAA,aAInCN,KAAAO,wBAA0B,oBArB1BC,OAAAC,eAAIZ,EAAAa,UAAA,yBAAsB,KAI1B,WACE,OAAOV,KAAKC,6BALd,SAA2BU,GACzBX,KAAKC,wBAA0BU,EAC/BX,KAAKD,kBAAkBa,gDA0BzBf,EAAAa,UAAAG,gBAAA,SAAgBC,GACd,OAAQd,KAAKe,cAAgBf,KAAKe,aAAaD,GAC7Cd,KAAKe,aAAaD,GAClBA,EAAcA,EAAYE,cAAgB,IAGvCnB,EAAAa,UAAAO,uBAAA,WACDjB,KAAKkB,uBACPlB,KAAKmB,wBAELnB,KAAKoB,wBAIDvB,EAAAa,UAAAU,qBAAA,WACNpB,KAAKkB,wBAAyB,EAC9BlB,KAAKqB,oCAGCxB,EAAAa,UAAAS,sBAAA,WACNnB,KAAKkB,wBAAyB,EAC9BlB,KAAKsB,sCAGAzB,EAAAa,UAAAa,0BAAA,SAA0BZ,GAC/BX,KAAKwB,oBAAsBb,EAC3BX,KAAKmB,wBACLnB,KAAKK,mBAAmBoB,KAAKzB,KAAKwB,sBAG5B3B,EAAAa,UAAAW,iCAAA,WAAA,IAAAK,EAAA1B,KACNA,KAAKO,wBAA0BP,KAAKF,SAAS6B,OAAO,WAAY,SAAS,SAACC,GACnEF,EAAKG,sBAAsBC,cAAcC,SAASH,EAAMI,SAC3DN,EAAKP,4BAKHtB,EAAAa,UAAAY,mCAAA,WACFtB,KAAKO,0BACPP,KAAKO,0BACLP,KAAKO,6BAA0B0B,6BA5EpCC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,SAAA,kzCAJsEC,EAAAA,iBAAWC,EAAAA,kEAiBhFC,EAAAA,4BACAA,EAAAA,4BAEAA,EAAAA,yBAEAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,kCAEAC,EAAAA,sCAEAC,EAAAA,UAASP,KAAA,CAAC,wBCbb,iCAXCQ,EAAAA,SAAQR,KAAA,CAAC,CACRS,aAAc,CACZ/C,GAEFgD,QAAS,CACPC,EAAAA,cAEFC,QAAS,CACPlD","sourcesContent":["import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, Renderer2, ChangeDetectorRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-flag-picker',\r\n  templateUrl: './ngx-flag-picker.component.html',\r\n  styleUrls: ['./ngx-flag-picker.component.scss']\r\n})\r\nexport class NgxFlagPickerComponent {\r\n  private _isShowListCountryFlags = false;\r\n  set isShowListCountryFlags(value: boolean) {\r\n    this._isShowListCountryFlags = value;\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n  get isShowListCountryFlags(): boolean {\r\n    return this._isShowListCountryFlags;\r\n  }\r\n\r\n  @Input() selectedCountryCode: string;\r\n  @Input() countryCodes: string[];\r\n\r\n  @Input() customLabels: Record<string, string>;\r\n\r\n  @Input() showFlags = true;\r\n  @Input() showLabels = true;\r\n  @Input() showArrow = true;\r\n\r\n  @Output() changedCountryCode = new EventEmitter<string>();\r\n\r\n  @ViewChild('selectFlags') selectFlagsElementRef: ElementRef;\r\n\r\n  outsideClickSelectFlags = () => {};\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  getCountryLabel(countryCode: string): string {\r\n    return (this.customLabels && this.customLabels[countryCode]) ?\r\n      this.customLabels[countryCode] :\r\n      countryCode ? countryCode.toUpperCase() : '';\r\n  }\r\n\r\n  public toggleListCountryFlags(): void {\r\n    if (this.isShowListCountryFlags) {\r\n      this.closeListCountryFlags();\r\n    } else {\r\n      this.openListCountryFlags();\r\n    }\r\n  }\r\n\r\n  private openListCountryFlags(): void {\r\n    this.isShowListCountryFlags = true;\r\n    this.subscribeOutsideClickSelectFlags();\r\n  }\r\n\r\n  private closeListCountryFlags(): void {\r\n    this.isShowListCountryFlags = false;\r\n    this.unsubscribeOutsideClickSelectFlags();\r\n  }\r\n\r\n  public changeSelectedCountryCode(value: string): void {\r\n    this.selectedCountryCode = value;\r\n    this.closeListCountryFlags();\r\n    this.changedCountryCode.emit(this.selectedCountryCode);\r\n  }\r\n\r\n  private subscribeOutsideClickSelectFlags(): void {\r\n    this.outsideClickSelectFlags = this.renderer.listen('document', 'click', (event) => {\r\n      if (!this.selectFlagsElementRef.nativeElement.contains(event.target)) {\r\n        this.closeListCountryFlags();\r\n      }\r\n    });\r\n  }\r\n\r\n  private unsubscribeOutsideClickSelectFlags(): void {\r\n    if (this.outsideClickSelectFlags) {\r\n      this.outsideClickSelectFlags();\r\n      this.outsideClickSelectFlags = undefined;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxFlagPickerComponent } from './ngx-flag-picker/ngx-flag-picker.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxFlagPickerComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    NgxFlagPickerComponent,\r\n  ]\r\n})\r\nexport class NgxFlagPickerModule { }\r\n"]}