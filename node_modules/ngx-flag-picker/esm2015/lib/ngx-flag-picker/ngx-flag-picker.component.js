import { Component, Input, Output, EventEmitter, ViewChild, Renderer2, ChangeDetectorRef } from '@angular/core';
export class NgxFlagPickerComponent {
    constructor(renderer, changeDetectorRef) {
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this._isShowListCountryFlags = false;
        this.showFlags = true;
        this.showLabels = true;
        this.showArrow = true;
        this.changedCountryCode = new EventEmitter();
        this.outsideClickSelectFlags = () => { };
    }
    set isShowListCountryFlags(value) {
        this._isShowListCountryFlags = value;
        this.changeDetectorRef.markForCheck();
    }
    get isShowListCountryFlags() {
        return this._isShowListCountryFlags;
    }
    getCountryLabel(countryCode) {
        return (this.customLabels && this.customLabels[countryCode]) ?
            this.customLabels[countryCode] :
            countryCode ? countryCode.toUpperCase() : '';
    }
    toggleListCountryFlags() {
        if (this.isShowListCountryFlags) {
            this.closeListCountryFlags();
        }
        else {
            this.openListCountryFlags();
        }
    }
    openListCountryFlags() {
        this.isShowListCountryFlags = true;
        this.subscribeOutsideClickSelectFlags();
    }
    closeListCountryFlags() {
        this.isShowListCountryFlags = false;
        this.unsubscribeOutsideClickSelectFlags();
    }
    changeSelectedCountryCode(value) {
        this.selectedCountryCode = value;
        this.closeListCountryFlags();
        this.changedCountryCode.emit(this.selectedCountryCode);
    }
    subscribeOutsideClickSelectFlags() {
        this.outsideClickSelectFlags = this.renderer.listen('document', 'click', (event) => {
            if (!this.selectFlagsElementRef.nativeElement.contains(event.target)) {
                this.closeListCountryFlags();
            }
        });
    }
    unsubscribeOutsideClickSelectFlags() {
        if (this.outsideClickSelectFlags) {
            this.outsideClickSelectFlags();
            this.outsideClickSelectFlags = undefined;
        }
    }
}
NgxFlagPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-flag-picker',
                template: "<div class=\"select-flags\" #selectFlags>\r\n  <div class=\"country-flag\" tabindex=\"0\" (click)=\"toggleListCountryFlags()\">\r\n    <span *ngIf=\"showFlags\" [ngClass]=\"{ 'flag-icon-margin-right': showLabels }\" class=\"flag-icon flag-icon-{{ selectedCountryCode }}\"></span>\r\n    <span *ngIf=\"showLabels\" class=\"country-code\">{{ getCountryLabel(selectedCountryCode) }}</span>\r\n    <span *ngIf=\"showArrow\">\u25BE</span>\r\n  </div>\r\n  <div class=\"list-country-flags\" *ngIf=\"isShowListCountryFlags\">\r\n    <div class=\"country-flag\" tabindex=\"0\" *ngFor=\"let code of countryCodes\" (click)=\"changeSelectedCountryCode(code)\">\r\n      <span>\r\n        <span *ngIf=\"showFlags\" [ngClass]=\"{ 'flag-icon-margin-right': showLabels }\" class=\"flag-icon flag-icon-{{ code }}\"></span>\r\n        <span *ngIf=\"showLabels\" class=\"country-code\">{{ getCountryLabel(code) }}</span>\r\n      </span>\r\n    </div>\r\n  </div>\r\n</div>",
                styles: [".select-flags{display:inline-block;position:relative;color:#50575e;text-align:left}.flag-icon-margin-right{margin-right:6px}.country-flag{cursor:pointer;outline:none;white-space:nowrap}.list-country-flags{width:-moz-available;position:absolute;max-height:200px;margin-top:10px;padding:5px;background:#fff;border:1px solid #c7c7c7;overflow:auto;z-index:99999}"]
            },] }
];
NgxFlagPickerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
NgxFlagPickerComponent.propDecorators = {
    selectedCountryCode: [{ type: Input }],
    countryCodes: [{ type: Input }],
    customLabels: [{ type: Input }],
    showFlags: [{ type: Input }],
    showLabels: [{ type: Input }],
    showArrow: [{ type: Input }],
    changedCountryCode: [{ type: Output }],
    selectFlagsElementRef: [{ type: ViewChild, args: ['selectFlags',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZsYWctcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1mbGFnLXBpY2tlci9zcmMvbGliL25neC1mbGFnLXBpY2tlci9uZ3gtZmxhZy1waWNrZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFjLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU81SCxNQUFNLE9BQU8sc0JBQXNCO0lBeUJqQyxZQUNVLFFBQW1CLEVBQ25CLGlCQUFvQztRQURwQyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUExQnRDLDRCQUF1QixHQUFHLEtBQUssQ0FBQztRQWMvQixjQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDbEIsY0FBUyxHQUFHLElBQUksQ0FBQztRQUVoQix1QkFBa0IsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBSTFELDRCQUF1QixHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztJQUsvQixDQUFDO0lBMUJMLElBQUksc0JBQXNCLENBQUMsS0FBYztRQUN2QyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsS0FBSyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsSUFBSSxzQkFBc0I7UUFDeEIsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUM7SUFDdEMsQ0FBQztJQXNCRCxlQUFlLENBQUMsV0FBbUI7UUFDakMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVNLHNCQUFzQjtRQUMzQixJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMvQixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztTQUM5QjthQUFNO1lBQ0wsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRU8sb0JBQW9CO1FBQzFCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUM7UUFDbkMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLENBQUM7SUFDMUMsQ0FBQztJQUVPLHFCQUFxQjtRQUMzQixJQUFJLENBQUMsc0JBQXNCLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFTSx5QkFBeUIsQ0FBQyxLQUFhO1FBQzVDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUM7UUFDakMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sZ0NBQWdDO1FBQ3RDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDakYsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDcEUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7YUFDOUI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxrQ0FBa0M7UUFDeEMsSUFBSSxJQUFJLENBQUMsdUJBQXVCLEVBQUU7WUFDaEMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLHVCQUF1QixHQUFHLFNBQVMsQ0FBQztTQUMxQztJQUNILENBQUM7OztZQTlFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsdThCQUErQzs7YUFFaEQ7OztZQU51RSxTQUFTO1lBQUUsaUJBQWlCOzs7a0NBaUJqRyxLQUFLOzJCQUNMLEtBQUs7MkJBRUwsS0FBSzt3QkFFTCxLQUFLO3lCQUNMLEtBQUs7d0JBQ0wsS0FBSztpQ0FFTCxNQUFNO29DQUVOLFNBQVMsU0FBQyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtZmxhZy1waWNrZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9uZ3gtZmxhZy1waWNrZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL25neC1mbGFnLXBpY2tlci5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hGbGFnUGlja2VyQ29tcG9uZW50IHtcclxuICBwcml2YXRlIF9pc1Nob3dMaXN0Q291bnRyeUZsYWdzID0gZmFsc2U7XHJcbiAgc2V0IGlzU2hvd0xpc3RDb3VudHJ5RmxhZ3ModmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX2lzU2hvd0xpc3RDb3VudHJ5RmxhZ3MgPSB2YWx1ZTtcclxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XHJcbiAgfVxyXG4gIGdldCBpc1Nob3dMaXN0Q291bnRyeUZsYWdzKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd0xpc3RDb3VudHJ5RmxhZ3M7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKSBzZWxlY3RlZENvdW50cnlDb2RlOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgY291bnRyeUNvZGVzOiBzdHJpbmdbXTtcclxuXHJcbiAgQElucHV0KCkgY3VzdG9tTGFiZWxzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xyXG5cclxuICBASW5wdXQoKSBzaG93RmxhZ3MgPSB0cnVlO1xyXG4gIEBJbnB1dCgpIHNob3dMYWJlbHMgPSB0cnVlO1xyXG4gIEBJbnB1dCgpIHNob3dBcnJvdyA9IHRydWU7XHJcblxyXG4gIEBPdXRwdXQoKSBjaGFuZ2VkQ291bnRyeUNvZGUgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuXHJcbiAgQFZpZXdDaGlsZCgnc2VsZWN0RmxhZ3MnKSBzZWxlY3RGbGFnc0VsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XHJcblxyXG4gIG91dHNpZGVDbGlja1NlbGVjdEZsYWdzID0gKCkgPT4ge307XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgKSB7IH1cclxuXHJcbiAgZ2V0Q291bnRyeUxhYmVsKGNvdW50cnlDb2RlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICh0aGlzLmN1c3RvbUxhYmVscyAmJiB0aGlzLmN1c3RvbUxhYmVsc1tjb3VudHJ5Q29kZV0pID9cclxuICAgICAgdGhpcy5jdXN0b21MYWJlbHNbY291bnRyeUNvZGVdIDpcclxuICAgICAgY291bnRyeUNvZGUgPyBjb3VudHJ5Q29kZS50b1VwcGVyQ2FzZSgpIDogJyc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdG9nZ2xlTGlzdENvdW50cnlGbGFncygpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmlzU2hvd0xpc3RDb3VudHJ5RmxhZ3MpIHtcclxuICAgICAgdGhpcy5jbG9zZUxpc3RDb3VudHJ5RmxhZ3MoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMub3Blbkxpc3RDb3VudHJ5RmxhZ3MoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgb3Blbkxpc3RDb3VudHJ5RmxhZ3MoKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzU2hvd0xpc3RDb3VudHJ5RmxhZ3MgPSB0cnVlO1xyXG4gICAgdGhpcy5zdWJzY3JpYmVPdXRzaWRlQ2xpY2tTZWxlY3RGbGFncygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjbG9zZUxpc3RDb3VudHJ5RmxhZ3MoKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzU2hvd0xpc3RDb3VudHJ5RmxhZ3MgPSBmYWxzZTtcclxuICAgIHRoaXMudW5zdWJzY3JpYmVPdXRzaWRlQ2xpY2tTZWxlY3RGbGFncygpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNoYW5nZVNlbGVjdGVkQ291bnRyeUNvZGUodmFsdWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5zZWxlY3RlZENvdW50cnlDb2RlID0gdmFsdWU7XHJcbiAgICB0aGlzLmNsb3NlTGlzdENvdW50cnlGbGFncygpO1xyXG4gICAgdGhpcy5jaGFuZ2VkQ291bnRyeUNvZGUuZW1pdCh0aGlzLnNlbGVjdGVkQ291bnRyeUNvZGUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdWJzY3JpYmVPdXRzaWRlQ2xpY2tTZWxlY3RGbGFncygpOiB2b2lkIHtcclxuICAgIHRoaXMub3V0c2lkZUNsaWNrU2VsZWN0RmxhZ3MgPSB0aGlzLnJlbmRlcmVyLmxpc3RlbignZG9jdW1lbnQnLCAnY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKCF0aGlzLnNlbGVjdEZsYWdzRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcclxuICAgICAgICB0aGlzLmNsb3NlTGlzdENvdW50cnlGbGFncygpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdW5zdWJzY3JpYmVPdXRzaWRlQ2xpY2tTZWxlY3RGbGFncygpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLm91dHNpZGVDbGlja1NlbGVjdEZsYWdzKSB7XHJcbiAgICAgIHRoaXMub3V0c2lkZUNsaWNrU2VsZWN0RmxhZ3MoKTtcclxuICAgICAgdGhpcy5vdXRzaWRlQ2xpY2tTZWxlY3RGbGFncyA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19